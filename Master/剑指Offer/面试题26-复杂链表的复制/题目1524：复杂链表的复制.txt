题目1524：复杂链表的复制

题目描述：
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点）。
输入：
输入可能包含多个测试样例，输入以EOF结束。
对于每个测试案例，输入的第一行为一个整数n (1<=n<=1000)：n代表将要输入的链表元素的个数。（节点编号从1开始）。
接下来有n个数，表示链表节点中的值。
接下来有n个数Ti，Ti表示第i个节点的另一个指针指向。
Ti = 0 表示这个指针为NULL。
输出：
对应每个测试案例，
输出n行，每行有二个数，第一个代表当前节点值，第二个代表当前节点的特殊指针的值。
样例输入：
5
1 2 3 4 5
3 5 0 2 0
样例输出：
1 3
2 5
3 0
4 2
5 0 


参考同目录文档

代码如下

#include <stdio.h> 
#include <string.h>

#define MAX 1001
typedef struct Node{
	int val;
	Node* next;
	Node* skipIndex;
}Node;

Node* tmpNodeList[MAX];

Node *head,*cur;
Node *newhead;
void AddToList(Node* node){
	if(NULL == head){
		head = cur = node;
	}
	else{
		cur->next = node;
		cur = node;
	}
}

Node* BuildNode(int val){
	Node* node = new Node;
	node->val = val;
	node->next = NULL;
	node->skipIndex = NULL;
	return node;
}

void AddToNewLinkedlist(Node* node){
	if(NULL == newhead){
		newhead = cur = node;
	}
	else{
		cur->next = node;
		cur = cur->next;
	}
}
Node* CopyLinkedList(Node* header){
	if(NULL == header){
		return NULL;
	}
	Node* current = header;
	Node* tmp = NULL;
	while(NULL != current){
		//Get next node
		Node* next = current->next;

		//New a New node
		Node* newnode = new Node;
		newnode->val = current->val;
		//Add the copy node to old linked list
		tmp = current->next;
		current->next = newnode;
		newnode->next = tmp;
		//add the relations
		newnode->skipIndex = current->skipIndex; 

		//Set Next
		current = next;
	}
	
	int count = 1;
	current = header;
	while(NULL != current){
		//Get next node
		Node* next = current->next;
		if(count%2 == 0){
			//Add to New List
			AddToNewLinkedlist(current);
		}
		count++;
		//Set Next
		current = next;
	}
	cur = newhead;
	while(NULL != cur){
		if(NULL != cur->skipIndex){
			printf("%d %d\n",cur->val,cur->skipIndex->val);
		}
		else{
			printf("%d %d\n",cur->val,0);
		}
		cur = cur->next;
	}
	return NULL;
}

int main()
{
	int n;
	while(scanf("%d",&n) != EOF) {
		head = cur = newhead = NULL;
		for(int i = 1 ; i <= n; i++){
			int tmp;
			scanf("%d",&tmp);
			Node* node = BuildNode(tmp);
			tmpNodeList[i] = node;
			AddToList(node);
		}
		for(int i = 1 ; i <= n; i++){
			int index = 0;
			scanf("%d",&index);
			if(0 != index){
				tmpNodeList[i]->skipIndex = tmpNodeList[index];
			}
		}
		//Copy The linked list
		CopyLinkedList(head);
	}
	return 0;
}