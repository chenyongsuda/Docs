题目1522：包含min函数的栈

题目描述：
定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。
输入：
输入可能包含多个测试样例，输入以EOF结束。
对于每个测试案例，输入的第一行为一个整数n(1<=n<=1000000)， n代表将要输入的操作的步骤数。
接下来有n行，每行开始有一个字母Ci。
Ci=’s’时，接下有一个数字k，代表将k压入栈。
Ci=’o’时，弹出栈顶元素。
输出：
对应每个测试案例中的每个操作，
若栈不为空，输出相应的栈中最小元素。否则，输出NULL。
样例输入：
7
s 3
s 4
s 2
s 1
o
o
s 0
样例输出：
3
3
2
1
2
3
0



比较简单
每个进堆栈元素保存当前最小值


WA代码

#include <stdio.h> 
#include <string.h>

#define MAX 1000001

typedef struct Item{
	int val;
	int min;
}Item;


int top = -1;
Item* heap[MAX];



Item* GetTop(){
	return heap[top];
}


void AddToHeap(int val){
	Item* item = new Item;
	item->val = val;
	if(-1 != top){
		Item* it = GetTop();
		int min = it->min > val ? val : it->min;
		item->min = min;
	} 
	else{
		item->min = val;
	}
	heap[++top] = item;
}


void RemoveTop(){
	if(-1 == top)
		return;
	top--;
}

void Print(Item* it){
	printf("%d\n",it->min);
}

int main()
{
	int n;
	char action;
	int tmp;
	while(scanf("%d\n",&n) != EOF) {
		top = -1;
		for (int i = 0; i < n; i++) {
			scanf("%c",&action);
			if('s' == action){
				scanf("%d",&tmp);
				//Push to heap
				AddToHeap(tmp);
				Item* it = GetTop();
				Print(it);
			}
			else{
				//Pop
				RemoveTop();
				if(-1 != top)
					Print(GetTop());
				else
					printf("NULL\n");
			}
		}
	}
	return 0;
}

把输入改成 for (int i = 0; i < n; i++) {
			scanf("%s",action);
过了  = =！！