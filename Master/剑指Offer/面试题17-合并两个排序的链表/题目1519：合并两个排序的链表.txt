题目1519：合并两个排序的链表

题目描述：
输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
(hint: 请务必使用链表。)
输入：
输入可能包含多个测试样例，输入以EOF结束。
对于每个测试案例，输入的第一行为两个整数n和m(0<=n<=1000, 0<=m<=1000)：n代表将要输入的第一个链表的元素的个数,m代表将要输入的第二个链表的元素的个数。
下面一行包括n个数t(1<=t<=1000000)：代表链表一中的元素。接下来一行包含m个元素，s(1<=t<=1000000)。
输出：
对应每个测试案例，
若有结果，输出相应的链表。否则，输出NULL。
样例输入：
5 2
1 3 5 7 9
2 4
0 0
样例输出：
1 2 3 4 5 7 9
NULL

代码如下

#include<stdio.h>
#include<string.h>

typedef struct  Node{
	Node* next;
	int val;
}Node;

Node* cur = NULL;
Node* fir = NULL;
Node* sec = NULL;
Node* res = NULL;

//Return The Tire of linked list
Node* Add2LinkList(Node* item){
	if(NULL == res){
		res = cur = item;
	} 
	else{
		cur->next = item;
		cur = cur->next;
	}
	return cur;
}

void PrintLinkList(Node* header){
	bool first = true;
	while(NULL != header){
		if(first){
			printf("%d",header->val);
			first = false;
		}
		else
			printf(" %d",header->val);
		header = header->next;
	}
}

int main()
{
	int n,m;
	while(scanf("%d%d",&n,&m) != EOF) {

		cur = NULL;
		fir = NULL;
		sec = NULL;
		res = NULL;

		if(0 == n && 0 == m){
			printf("NULL\n");
			continue;
		}
		//Build Link List 1
		for (int i = 0; i < n; i++) {
			int tmp;
			scanf("%d",&tmp);
			Node* node = new Node;
			node->next = NULL;
			node->val = tmp;
			if(NULL == fir){
				fir = cur = node;
			}
			else{
				cur->next = node;
				cur = cur->next;
			}
		}
		//Build Link list 2
		for (int i = 0; i < m; i++) {
			int tmp;
			scanf("%d",&tmp);
			Node* node = new Node;
			node->next = NULL;
			node->val = tmp;
			if(NULL == sec){
				sec = cur = node;
			}
			else{
				cur->next = node;
				cur = cur->next;
			}
		}

		if(NULL == fir){
			PrintLinkList(sec);
		} 
		else if (NULL == sec){
			PrintLinkList(fir);
		}
		else{
			Node* tmp = NULL;
			Node* tile = NULL;
			//Merge Link list
			while(NULL != fir && NULL != sec){
				if(fir->val < sec->val){
					tmp = fir->next;
					tile = Add2LinkList(fir);
					fir = tmp;
				}
				else{
					tmp = sec->next;
					tile = Add2LinkList(sec);
					sec = tmp;
				}
			}

			//Add The end to Link list tile
			if(NULL == fir){
				tile->next = sec;
			}
			if(NULL == sec){
				tile->next = fir;
			}
		
			PrintLinkList(res);
		}
		printf("\n");
	}
	return 0;
}

