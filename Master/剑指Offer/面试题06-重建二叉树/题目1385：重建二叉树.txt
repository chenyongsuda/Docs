题目描述：
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并输出它的后序遍历序列。

输入：
输入可能包含多个测试样例，对于每个测试案例，
输入的第一行为一个整数n(1<=n<=1000)：代表二叉树的节点个数。
输入的第二行包括n个整数(其中每个元素a的范围为(1<=a<=1000))：代表二叉树的前序遍历序列。
输入的第三行包括n个整数(其中每个元素a的范围为(1<=a<=1000))：代表二叉树的中序遍历序列。
输出：
对应每个测试案例，输出一行：
如果题目中所给的前序和中序遍历序列能构成一棵二叉树，则输出n个整数，代表二叉树的后序遍历序列，每个元素后面都有空格。
如果题目中所给的前序和中序遍历序列不能构成一棵二叉树，则输出”No”。
样例输入：
8
1 2 4 7 3 5 6 8
4 7 2 1 5 3 8 6
8
1 2 4 7 3 5 6 8
4 1 2 7 5 3 8 6
样例输出：
7 4 2 5 8 6 3 1 
No




1.前序中序确定后序

一直PE

输出结果有问题
AC的代码如下：

#include<stdio.h>
#include<string.h>
#define MAX 1001
int pre[MAX];
int mid[MAX];

typedef struct Node {
	Node* left;
	Node* right;
	int val;
};

int error = 0;
bool first = true;

int Bisearch(int data[],int x,int begin,int end)
{
	for (int i = begin;i <= end; i++)
	{
		if(data[i] == x){
			return i;
		}
	}
	return -1;
}


Node* PraseTree(int ps,int pe,int ms,int md){
	int tmp = pre[ps];
	Node * node = new Node;
	node->val = tmp;

	if(ps > pe || ms > md){
		return NULL;
	}

	int index = Bisearch(mid,tmp,ms,md);
	if(-1 == index){
		error = -1;
	}
	else{
		int leftLen = index - ms;
		int rightLen = md - index;
		//Left
		node->left = PraseTree(ps + 1,ps + leftLen,ms,index - 1);
		//Right
		node->right = PraseTree(ps + leftLen + 1,pe,index + 1,md);
	}

	return node;
}

void SufTree(Node* header){
	if(NULL == header){
		return;
	}
	SufTree(header->left);
	SufTree(header->right);
	printf("%d ",header->val);
}

int main()
{
	int n;
	//Build Linked list
	while(scanf("%d",&n) != EOF) {
		error = 0;
		first = true;
		for(int i = 0; i < n; i++){
			//Save Pre
			scanf("%d",&pre[i]);
		}
		for(int i = 0; i < n; i++){
			//Save Mid
			scanf("%d",&mid[i]);
		}
		Node* top = PraseTree(0,n - 1,0,n - 1);
		if(-1 == error){
			printf("No\n");
		}
		else{
			SufTree(top);
			printf("\n");
		}
	}
	
	return 0;
}




