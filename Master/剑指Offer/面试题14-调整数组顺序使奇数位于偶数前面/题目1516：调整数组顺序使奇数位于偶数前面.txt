题目1516：调整数组顺序使奇数位于偶数前面

题目描述：
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
输入：
每个输入文件包含一组测试案例。
对于每个测试案例，第一行输入一个n，代表该数组中数字的个数。
接下来的一行输入n个整数。代表数组中的n个数。
输出：
对应每个测试案例，
输入一行n个数字，代表调整后的数组。注意，数字和数字之间用一个空格隔开，最后一个数字后面没有空格。
样例输入：
5
1 2 3 4 5
样例输出：
1 3 5 2 4

没想到好办法

1. 遍历两遍一次输出奇数一次输出偶数
2. 用额外空间保存
3. 从头找奇数 找到了向前类似于冒泡排序依次交换前面的偶数  复杂度比较高 n2

别人的可行方案
1. 把数组拆分 直到 只有叶节点只有两个元素 然后回溯 递归
最后复杂度nlg(n)
2.

AC代码用的第一种

#include<stdio.h>
#include<string.h>
#define MAX 1000001
int a[MAX];

void Swap(int i, int j){
	int tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
}

int main()
{
	int n;
	while(scanf("%d",&n) != EOF) {
		for (int i = 0; i < n; i++) {
			scanf("%d",&a[i]);
		}
		bool isFirst = true;
		for (int i = 0; i < n; i++) {
			if((a[i] & 1) == 1){
				if(isFirst){
					printf("%d",a[i]);
					isFirst =false;
				}
				else{
					printf(" %d",a[i]);
				}
			}
		}
		for (int i = 0; i < n; i++) {
			if((a[i] & 1) != 1){
				if(isFirst){
					printf("%d",a[i]);
					isFirst =false;
				}
				else{
					printf(" %d",a[i]);
				}
			}
		}
		printf("\n");
	}
	return 0;
}

