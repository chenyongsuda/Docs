题目1366：栈的压入、弹出序列

题目描述：
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
输入：
每个测试案例包括3行：
第一行为1个整数n(1<=n<=100000)，表示序列的长度。
第二行包含n个整数，表示栈的压入顺序。
第三行包含n个整数，表示栈的弹出顺序。
输出：
对应每个测试案例，如果第二个序列是第一个序列的弹出序列输出Yes，否则输出No。
样例输入：
5
1 2 3 4 5
4 5 3 2 1
5
1 2 3 4 5
4 3 5 1 2
样例输出：
Yes
No



这个得好好做做

这题可以出成 
1.这个序列有多少种出栈方式  这样就成了 卡特兰数列
2.还可以打印所有的序列  就变成了树的操作方式了 每个节点有两种 1.出栈 2.入栈


本题的解题我使用了模拟  

代码如下

#include <stdio.h> 
#include <string.h>

#define MAX 100001

int heap[MAX];
int heaptop = -1;
int leftIndex = 0;
int Seq[MAX];
int newSeq[MAX];

bool IsEmpty(){
	return (heaptop == -1);
}
void AddToHeap(int val){
	heap[++heaptop] = val;
}

int GetTop(){
	return heap[heaptop];
}

void RemoveItem(){
	heaptop--;
}

int main()
{
	int n;
	
	while(scanf("%d\n",&n) != EOF) {
		heaptop = -1;
		leftIndex = 0;
		for (int i = 0; i < n; i++) {
			int tmp;
			scanf("%d",&Seq[i]);
		}
		for (int i = 0; i < n; i++) {
			scanf("%d",&newSeq[i]);
		}

		for (int i = 0; i < n; i++) {
			AddToHeap(Seq[i]);
			while (false == IsEmpty())
			{
				int val = GetTop();
				if(newSeq[leftIndex] == val){
					RemoveItem();
					leftIndex++;
				}
				else{
					break;
				}
			}
		}

		if(leftIndex == n && true == IsEmpty()){
			printf("Yes\n");
		}
		else{
			printf("No\n");
		}
		
	}
	return 0;
}
