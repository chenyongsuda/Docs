题目1386：旋转数组的最小数字

题目描述：
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
输入：
输入可能包含多个测试样例，对于每个测试案例，
输入的第一行为一个整数n(1<= n<=1000000)：代表旋转数组的元素个数。
输入的第二行包括n个整数，其中每个整数a的范围是(1<=a<=10000000)。
输出：
对应每个测试案例，
输出旋转数组中最小的元素。
样例输入：
5
3 4 5 1 2
样例输出：
1


#include<stdio.h>
#include<string.h>

#define  MAX 1000001
int a[MAX];
int n;

int Search(int s,int e){
	//case 1
	if(s == e){
		return s;
	}
	//Case 2
	if(s + 1 == e){
		if(a[s] < a[e]){
			return s;
		}
		else{
			return e;
		}
	}
	int m = (s + e) >> 1;
	if(a[m] > a[s] && a[m] > a[e]){
		return Search(m + 1,e);
	}
	else{
		return Search(s,m);
	}
}

int main()
{
	while(scanf("%d",&n) != EOF){
		for(int i = 0; i < n; i++){
			scanf("%d",&a[i]);
		}
		//
		int re = Search(0, n-1);
		printf("%d\n",a[re]);
	}
	return 0;
}

int Search(int s,int e){
	//case 1
	if(s == e){
		return s;
	}
	//Case 2
	if(s + 1 == e){
		if(a[s] < a[e]){
			return s;
		}
		else{
			return e;
		}
	}
	int m = (s + e) >> 1;
	if(a[m] > a[s] && a[m] > a[e]){
		return Search(m + 1,e);
	}
	else{
		return Search(s,m);
	}
}这个函数对二分查找做了扩展分割
最终长度肯定会出现1 或者2的case
对case长度 1 2 做特殊处理 我觉得对我自己而言比经典的二分查找变种代码好理解多了

