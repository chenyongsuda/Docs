题目1088：剩下的树
题目描述：
    有一个长度为整数L(1<=L<=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，...，L共L+1个位置上有L+1棵树。
    现在要移走一些树，移走的树的区间用一对数字表示，如 100 200表示移走从100到200之间（包括端点）所有的树。
    可能有M(1<=M<=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。
输入：
    两个整数L(1<=L<=10000)和M(1<=M<=100)。
    接下来有M组整数，每组有一对数字。
输出：
    可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。
样例输入：
500 3
100 200
150 300
470 471
样例输出：
298


思路：按照第一个坐标排序 依次判断有交集么 有交集就合并 没有就push入队列
结束后按照队列里面的元素计算remove了多少树 按照原有的减去remove的 就是答案

#include <cstdio>  
#include <cstring>  
#include <queue>
#include <math.h>
#include <algorithm>
#include <stdlib.h>
using namespace std;

#define MAXCOUNT 101
typedef struct  {
	short start;
	short end;
}Segment;

queue<Segment> Q;
Segment SegList[MAXCOUNT];

int cmp(const void *a, const void *b) { 
	Segment *item1 =  (Segment*)a;
	Segment *item2 =  (Segment*)b;
	return item1->start - item2->start;
}

int Solve(int l,int m){
	for (int index = 0; index < m; index++) {
		if (Q.empty()) {
			Q.push(SegList[index]);
		}
		else{
			Segment top = Q.front();
			if(SegList[index].start > top.end){
				Q.push(SegList[index]);
			}
			else {
				Q.pop();
				Segment seg;
				seg.start = top.start;
				seg.end = SegList[index].end;
				Q.push(seg);
			}
		}
	}
	int sum = 0;
	//Caculate The Tree
	while(!Q.empty()){
		Segment tmp = Q.front();
		Q.pop();
		sum += tmp.end - tmp.start + 1;
	}

	return l + 1 - sum;
}

int main () {  
	int l,m,begin,end;
	while(scanf("%d%d",&l,&m)!=EOF){
		if(m <= 0){
			printf("%d\n",l + 1);
		}
		for (int index = 0; index < m;index++) {
			Segment seg;
			scanf("%d%d",&begin,&end);
			SegList[index].start = begin;
			SegList[index].end = end;
		}
		qsort(SegList,m,sizeof(SegList[0]),cmp);
		int res = Solve(l,m);
		printf("%d\n",res);
	}
	return 0;  
} 

一直是WA

主要是如果有数据
100 200
120 180
210 250
向之前代码中100 200 和120 180合并会变成100 180  尾部是使用下一个的180这是有问题的
应该取两个中比较大的

改成
				Q.pop();
				Segment seg;
				seg.start = top.start;
				int max = top.end > SegList[index].end ? top.end : SegList[index].end;
				seg.end = max;
				Q.push(seg);

正确代码
#include <cstdio>  
#include <cstring>  
#include <queue>
#include <math.h>
#include <algorithm>
#include <stdlib.h>
#include<stack>
using namespace std;

#define MAXCOUNT 101
typedef struct  {
	short start;
	short end;
}Segment;

stack<Segment> Q;
Segment SegList[MAXCOUNT];

int cmp(const void *a, const void *b) { 
	Segment *item1 =  (Segment*)a;
	Segment *item2 =  (Segment*)b;
	return (item1->start - item2->start);
}

int Solve(int l,int m){
	for (int index = 0; index < m; index++) {
		if (Q.empty()) {
			Q.push(SegList[index]);
		}
		else{
			Segment top = Q.top();
			if(SegList[index].start > top.end){
				Q.push(SegList[index]);
			}
			else {
				Q.pop();
				Segment seg;
				seg.start = top.start;
				int max = top.end > SegList[index].end ? top.end : SegList[index].end;
				seg.end = max;
				Q.push(seg);
			}
		}
	}
	int sum = 0;
	//Caculate The Tree
	while(!Q.empty()){
		Segment tmp = Q.top();
		Q.pop();
		sum += tmp.end - tmp.start + 1;
	}

	return l + 1 - sum;
}

int main () {  
	int l,m,begin,end;
	while(scanf("%d%d",&l,&m)!=EOF){
		for (int index = 0; index < m;index++) {
			Segment seg;
			scanf("%d%d",&begin,&end);
			SegList[index].start = begin;
			SegList[index].end = end;
		}
		qsort(SegList,m,sizeof(SegList[0]),cmp);
		int res = Solve(l,m);
		printf("%d\n",res);
	}
	return 0;  
} 				


还可以用线段树