题目1482：玛雅人的密码
题目描述：
玛雅人有一种密码，如果字符串中出现连续的2012四个数字就能解开密码。给一个长度为N的字符串，（2=<N<=13）该字符串中只含有0,1,2三种数字，问这个字符串要移位几次才能解开密码，每次只能移动相邻的两个数字。例如02120经过一次移位，可以得到20120,01220,02210,02102，其中20120符合要求，因此输出为1.如果无论移位多少次都解不开密码，输出-1。
输入：
输入包含多组测试数据，每组测试数据由两行组成。
第一行为一个整数N，代表字符串的长度（2<=N<=13）。
第二行为一个仅由0、1、2组成的，长度为N的字符串。
输出：
对于每组测试数据，若可以解出密码，输出最少的移位次数；否则输出-1。
样例输入：
5
02120
样例输出：
1



代码

// Test.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <cstdio>  
#include <cstring>  
#include <queue>
using namespace std;

typedef struct Node  
{ 
	short level;
	char startIndex;
	char arr[14];  
}Node;  

bool isUsed[1600000];
queue<Node> Q;
int n;

int str2Int(Node& node){
	int res=0;  
	for(int i=0;node.arr[i];i++)  
	{  
		res=3*res+node.arr[i]-'0';
	}  
	return res;
}

bool CheckFinish(Node& node){
	//printf("%s \n",node.arr);
	int index = str2Int(node);
	if (isUsed[index]) {
		return false;
	}
	isUsed[index] = true;
	for (int index = 0; index < n - 3; index++) {
		if(node.arr[index] == '2'
			&& node.arr[index+1] == '0'
			&& node.arr[index+2] == '1'
			&& node.arr[index+3] == '2'){
			return true;
		}
	}
	return false;
}

void swap(Node& node, short st, short ed){
	int tmp = node.arr[st];
	node.arr[st] = node.arr[ed];
	node.arr[ed] = tmp;
}

void Solve(){

	bool bFind = false;
	while (!Q.empty())
	{
		Node tmp = Q.front();
		 Q.pop();
		if(CheckFinish(tmp)){
			printf("%d\n",tmp.level); 
			bFind = true;
			break;
		}
		for (int index = tmp.startIndex; index < n - 1; index++) {
			//Swap index index+1
			swap(tmp,index,index+1);
			tmp.startIndex = index;
			tmp.level = tmp.level + 1;
			//Push To Queue
			Q.push(tmp);
			//ReSwap index index+1
			swap(tmp,index,index+1);
			tmp.level = tmp.level - 1;
		}
	}
	
	if (!bFind){
		printf("-1\n"); 
	}
}


int main () {  
	while(scanf("%d",&n)!=EOF)  
	{  
		char str[14];  
		scanf("%s",str);  
		if(n<4)  
		{  
			printf("-1\n");  
			continue;  
		}
		Node fir;
		fir.level = 0;
		fir.startIndex = 0;
		strcpy(fir.arr,str);
		Q.push(fir);
		Solve();
	}
	return 0;  
}  

结果超时


正确结果
#include <cstdio>  
#include <cstring>  
#include <queue>
using namespace std;

typedef struct Node  
{ 
	short level;
	char arr[14];  
}Node;  

//bool isUsed[1600000];
int isUsed[50000];

queue<Node> Q;
int n;

int str2Int(Node& node){
	int res=0;  
	for(int i=0;node.arr[i];i++)  
	{  
		res=3*res+node.arr[i]-'0';
	}  
	return res;
}

bool CheckFinish(Node& node){
	//printf("%s \n",node.arr);
	for (int index = 0; index < n - 3; index++) {
		if(node.arr[index] == '2'
			&& node.arr[index+1] == '0'
			&& node.arr[index+2] == '1'
			&& node.arr[index+3] == '2'){
			return true;
		}
	}
	return false;
}

void swap(Node& node, short st, short ed){
	int tmp = node.arr[st];
	node.arr[st] = node.arr[ed];
	node.arr[ed] = tmp;
}

void clearQueue(){
	while(!Q.empty()){
		Q.pop();
	}
}

void SetUsed(int ivalue)
{
	int index = (ivalue - 1) >> 5;
	isUsed[index] |= (0x01 << 31 - ( ivalue % 32 ));
}

bool GetUsed(int ivalue){
	int index = (ivalue - 1) >> 5;
	return isUsed[index] & (0x01 << 31 - ( ivalue % 32 ));
}

int Solve(){

	bool bFind = false;
	while (!Q.empty())
	{
		Node tmp = Q.front();
		Q.pop();
		
		if(CheckFinish(tmp)){
			clearQueue();
			return tmp.level;
		}
		for (int index = 0; index < n - 1; index++) {
			//Swap index index+1
			swap(tmp,index,index+1);
			int ivalue = str2Int(tmp);
			if (!GetUsed(ivalue)) {

				tmp.level = tmp.level + 1;
				Q.push(tmp);
				tmp.level = tmp.level - 1;

				SetUsed(ivalue);
			}
			//ReSwap index index+1
			swap(tmp,index,index+1);
		}
	}
	return -1;
}


int main () {  
	while(scanf("%d",&n)!=EOF)  
	{  
		//printf("Size [%d]\n",Q.size());
		char str[14];  
		scanf("%s",str);  
		if(n<4)  
		{  
			printf("-1\n");  
			continue;  
		}
		memset(isUsed,0,sizeof(isUsed));
		Node fir;
		fir.level = 0;
		strcpy(fir.arr,str);
		Q.push(fir);
		int res = Solve();
		printf("%d\n",res); 
	}
	return 0;  
} 

其实这道题n非常小n≤13，可以用很暴力的广度优先搜索，3^13=1594323所以可以把每一个串看成一个三进制的数，这样hash到一个int里。这样空间也不会超。
压缩后，判断是否有字串可以这样：（三进制的2012=十进制的59）
while（x>59）
{
    if( (x-59)%81==0)
        return 成功；
  else
        x/=3;
}
return 失败；

每一位3种状态，最多3^13=10^6种状态。每种状态判断是否包括2012这个字串，最暴力的方法也只用比较10次。




