主项定理Master Method

在分析根据递归方程分析算法的时间复杂度时，常见到如下形式的方程，
T(n) = a * T(n/b) + f(n) 
a 3 1，b > 1，f(n)一般是个简单函数

这时可以有2种方法，来计算时间复杂度。一是用递归树，逐层代入原式，最终形成一个级数，
然后用一个函数来表达，得到T(n)。

二是应用主项定理Master Method 。其实，主项定理也就是对递归树方法的一种归纳，形成了
固定的计算方式，并分三种情形来计算。

这三种情形主要是比较 nlogba 与 f(n)，为什么要比较这两个函数呢？

观察原式，可以看出，nlogba其实相当于用递归树方法解出的递归方程的右侧的第一项，
而f(n)则是递归方程的右侧的第二项，这样，主项定理实际上是在比较组成结果的两个函数项，
而且这种比较是按照数量级（或者说是变化幅度）来比较的，也就是说，如2n 与 28n是
数量级（变化幅度）相当的。

这样就有了三种不同的情形：

f(n) < nlogba                

也就是 f(n) = O(nlogba - e ) ，e > 0为任意小的常数
或者说，f(n) 比 nlogba变化的慢，慢ne 
那么，T(n) ? Q (nlogba)

f(n) > nlogba           

也就是 f(n) = W(nlogba +e ) ，e > 0为任意小的常数
或者说，f(n) 比 nlogba变化的快，快ne 
那么， T(n) ? Q(f(n))

可以简单地说，递归方程的右侧的两项，哪项变化的块，T(n)就属于哪项的数量级

f(n) = nlogba

也就是两项的数量级相当，就给这个数量级乘上一个lg n 

T(n) ? Q(nlogba * lg n)

